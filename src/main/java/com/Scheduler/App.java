/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.Scheduler;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.Scheduler.CriticalPath.CriticalPath;
import com.common.ITask;
import com.common.Task;

import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.graph.DefaultEdge;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;


public class App extends Application {
    Graph<String, DefaultEdge> graph = new DefaultDirectedGraph<>(DefaultEdge.class);
    public String getGreeting() {
        return "Hello world.";
    }


    public static void main(String[] args) {
        /*
        System.out.println(new App().getGreeting());
        List<ITask> tasks = new ArrayList<>();
        List<UUID> first = new ArrayList<>();
        float time1 = 4f;
        Task firstTask = Task.ofDescriptionAndDeps(time1, "", first);
        tasks.add(firstTask);

        // create second task with the first as dependency and add it
        List<UUID> second = new ArrayList<>();
        second.add(firstTask.getTaskID());
        float time2 = 2f;
        Task secondTask = Task.ofDescriptionAndDeps(time2, "", second);
        tasks.add(secondTask);

        // create third task with no dependencies
        List<UUID> third = new ArrayList<>();
        float time3 = 4f;
        Task thirdTask = Task.ofDescriptionAndDeps(time3, "", third);
        tasks.add(thirdTask);

        // create fourth task with dependency of second
        List<UUID> fourth = new ArrayList<>();
        fourth.add(secondTask.getTaskID());
        float time4 = 6f;
        Task fourthTask = Task.ofDescriptionAndDeps(time4, "", fourth);
        tasks.add(fourthTask);

        CriticalPath criticalPath = CriticalPath.ofTasks(tasks);
        */
        launch();

    }


    @Override
    public void start(Stage primaryStage) throws Exception {
        Button openFormButton = new Button("Open Form");
        openFormButton.setOnAction((ActionEvent event) -> openFormButton.setText("asdf"));
        Label label = new Label("Welcome to Scheduler");
        StackPane sp = new StackPane(label);
        sp.getChildren().add(openFormButton);
        Scene scene = new Scene(sp, 640, 400);
        primaryStage.setTitle("Scheduler");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
}
